rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isOrganizer() {
        return isAuth() && getUserData(request.auth.uid).role == 'organizer';
    }

    function isManager() {
        return isAuth() && getUserData(request.auth.uid).role == 'manager';
    }
    
    function isManagerOfUser(userId) {
      let managerData = getUserData(request.auth.uid);
      let userData = getUserData(userId);
      return isManager() && managerData.communityId == userData.communityId;
    }

    // Rules for top-level collections
    match /users/{userId} {
      // Any authenticated user can read user profiles for leaderboards, etc.
      allow get: if isAuth();
      // Users can only update their own profile, and only the name field
      allow update: if isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']);
      
      // Organizers/Managers can update points, but this is done via server-side flows,
      // so client-side updates to points are denied.
      allow create, delete, list: if false;

      match /point_history/{historyId} {
        // Only the user themselves can see their own point history.
        allow read: if isOwner(userId);
        allow write: if false; // History is append-only via server-side flows
      }
    }
    
    match /communities/{communityId} {
        allow read: if isAuth();
        allow write: if isOrganizer(); // Only organizers can create/update/delete communities
    }
    
    match /metadata/{docId} {
        // Only organizers (via server functions) can change metadata like counters.
        allow read, write: if false;
    }
  }
}
