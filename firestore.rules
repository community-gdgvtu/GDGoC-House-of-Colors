rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuthenticated() {
      return request.auth != null;
    }

    match /users/{userId} {
      // ANY authenticated user can read user profiles (for leaderboards, etc.)
      allow get: if isAuthenticated();
      allow list: if isAuthenticated();
      
      // Allow a user to create their own document, or update their own name.
      allow write: if request.auth.uid == userId && 
                      // CREATE condition: document is being created
                      (!exists(/databases/$(database)/documents/users/$(userId)) || 
                      // UPDATE condition: only the 'name' field is being changed
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name']));
    }
    
    match /users/{userId}/point_history/{historyId} {
        // Only authenticated users can read point history
        allow read: if isAuthenticated();
        // Point history is immutable once created by an organizer/manager
        // This will be handled by more specific server-side logic (flows)
        allow create: if isAuthenticated();
        allow update, delete: if false;
    }

    match /communities/{communityId} {
        allow read: if true; // Communities are public
        // Only organizers can write to communities
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer';
    }

    match /metadata/{docId} {
      // Allow server-side flows (which run with admin privileges) to update metadata
      allow read: if isAuthenticated();
      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer';
    }
  }
}
