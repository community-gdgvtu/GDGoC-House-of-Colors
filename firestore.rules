rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isOrganizer() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'organizer';
    }
    
    function isManager() {
        return isSignedIn() && getUserData(request.auth.uid).role == 'manager';
    }
    
    function isManagerOfUser(userId) {
        let managerData = getUserData(request.auth.uid);
        let userData = getUserData(userId);
        return isManager() && managerData.communityId == userData.communityId;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      // Allow any signed-in user to read user profiles
      allow read: if isSignedIn();

      // Allow a user to update their own profile (e.g., name)
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['name', 'avatar']);
      
      // Organizers can update any user's role or community
      allow update: if isOrganizer() && (request.resource.data.keys().hasOnly(['role', 'communityId']) || request.resource.data.keys().hasAny(['name', 'avatar', 'role', 'communityId']));

      // Allow creating a user (e.g., on first sign-in)
      allow create: if isOwner(userId);
      
      // Only organizers can delete users
      allow delete: if isOrganizer();

      // Point History Subcollection
      match /point_history/{historyId} {
        // Only the user themselves or an organizer can read point history
        allow read: if isOwner(userId) || isOrganizer();

        // No one can write to point history directly from the client.
        // This must be done via server-side logic (e.g., Cloud Functions/server flows)
        allow write: if false;
      }
    }
    
    // Communities Collection
    match /communities/{communityId} {
        // Any signed-in user can view the list of communities
        allow read: if isSignedIn();
        
        // Only organizers can create, update, or delete communities
        allow write: if isOrganizer();
    }
    
    // Metadata for counters
    match /metadata/{docId} {
        // No client-side access
        allow read, write: if false;
    }
  }
}
