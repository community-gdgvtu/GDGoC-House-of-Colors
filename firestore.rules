
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if a user is an organizer
    function isOrganizer(userId) {
      return getUserData(userId).role == 'organizer';
    }

    // Helper function to check if a user is a manager of a specific community
    function isManagerOfCommunity(userId, communityId) {
      let userData = getUserData(userId);
      return userData.role == 'manager' && userData.communityId == communityId;
    }
    
    // Helper function to check if the request is from an authenticated user
    function isAuthenticated() {
        return request.auth != null;
    }
    
    // Helper to check if the user owns the document
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // ANY authenticated user can read user profiles (for leaderboards, etc.)
      allow read: if isAuthenticated();

      // Users can ONLY update their own 'name'.
      // Organizers can update any user's data.
      allow update: if (isOwner(userId) && request.resource.data.keys().hasOnly(['name'])) || isOrganizer(request.auth.uid);
      
      // Only organizers can create or delete users through server-side functions.
      // These rules are for client-side access.
      allow create, delete: if false;

      // Point history can be read by the owner or an organizer
      match /point_history/{historyId} {
        allow read: if isOwner(userId) || isOrganizer(request.auth.uid);
        allow create, update, delete: if false; // Should only be written by server-side logic
      }
    }

    // Rules for the 'communities' collection
    match /communities/{communityId} {
        // Any authenticated user can read community data
        allow read: if isAuthenticated();
        
        // Only organizers can create, update, or delete communities
        allow write: if isOrganizer(request.auth.uid);
    }
    
    // Rules for the 'metadata' collection (e.g., user counter)
    match /metadata/{docId} {
        // No client-side access. This should only be modified by trusted server-side code.
        allow read, write: if false;
    }
  }
}
